#import <Foundation/Foundation.h>
#import <ISO8601/ISO8601.h>
#import <AFNetworking/AFNetworking.h>
#import "ACJSONResponseSerializer.h"
#import "ACJSONRequestSerializer.h"
#import "ACQueryParamCollection.h"
#import "ACConfiguration.h"
#import "ACResponseDeserializer.h"
#import "ACSanitizer.h"
#import "ACLogger.h"

/**
* ARTIK Cloud API
* No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
*
* OpenAPI spec version: 2.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

#import "ACAckEnvelope.h"
#import "ACAcknowledgement.h"
#import "ACAction.h"
#import "ACActionArray.h"
#import "ACActionDetails.h"
#import "ACActionDetailsArray.h"
#import "ACActionIn.h"
#import "ACActionOut.h"
#import "ACActions.h"
#import "ACAggregateData.h"
#import "ACAggregatesHistogramData.h"
#import "ACAggregatesHistogramResponse.h"
#import "ACAggregatesResponse.h"
#import "ACAppProperties.h"
#import "ACCheckTokenMessage.h"
#import "ACCheckTokenResponse.h"
#import "ACDevice.h"
#import "ACDeviceArray.h"
#import "ACDeviceEnvelope.h"
#import "ACDeviceRegCompleteRequest.h"
#import "ACDeviceRegConfirmUserRequest.h"
#import "ACDeviceRegConfirmUserResponse.h"
#import "ACDeviceRegConfirmUserResponseEnvelope.h"
#import "ACDeviceRegStatusResponse.h"
#import "ACDeviceRegStatusResponseEnvelope.h"
//#import "ACDeviceTask.h"
//#import "ACDeviceTaskUpdateRequest.h"
//#import "ACDeviceTaskUpdateResponse.h"
#import "ACDeviceToken.h"
#import "ACDeviceTokenEnvelope.h"
#import "ACDeviceType.h"
#import "ACDeviceTypeArray.h"
#import "ACDeviceTypeEnvelope.h"
//#import "ACDeviceTypeInfo.h"
//#import "ACDeviceTypeInfoEnvelope.h"
#import "ACDeviceTypesEnvelope.h"
//#import "ACDeviceTypesInfo.h"
//#import "ACDeviceTypesInfoEnvelope.h"
#import "ACDevicesEnvelope.h"
#import "ACErrorEnvelope.h"
//#import "ACEventFeedData.h"
#import "ACExportData.h"
#import "ACExportDataArray.h"
#import "ACExportHistoryResponse.h"
#import "ACExportNormalizedMessagesResponse.h"
#import "ACExportRequest.h"
#import "ACExportRequestData.h"
#import "ACExportRequestInfo.h"
#import "ACExportRequestResponse.h"
#import "ACExportResponse.h"
#import "ACExportStatusResponse.h"
#import "ACFieldPath.h"
#import "ACFieldPresence.h"
#import "ACFieldPresenceEnvelope.h"
#import "ACFieldsActions.h"
#import "ACManifestProperties.h"
#import "ACManifestPropertiesEnvelope.h"
#import "ACManifestVersions.h"
#import "ACManifestVersionsEnvelope.h"
#import "ACMessage.h"
#import "ACMessageAction.h"
#import "ACMessageID.h"
#import "ACMessageIDEnvelope.h"
#import "ACMessageIn.h"
#import "ACMessageOut.h"
//#import "ACMetadataEnvelope.h"
//#import "ACMetadataPropertiesEnvelope.h"
//#import "ACMetadataQueryEnvelope.h"
#import "ACNonEmptyString.h"
#import "ACNormalizedAction.h"
#import "ACNormalizedActionsEnvelope.h"
#import "ACNormalizedMessage.h"
#import "ACNormalizedMessagesEnvelope.h"
#import "ACOutputRule.h"
#import "ACPresenceEnvelope.h"
#import "ACPresenceModel.h"
#import "ACPropertiesEnvelope.h"
#import "ACRefreshTokenResponse.h"
#import "ACRegisterMessage.h"
#import "ACRuleArray.h"
#import "ACRuleCreationInfo.h"
#import "ACRuleEnvelope.h"
#import "ACRuleError.h"
#import "ACRuleUpdateInfo.h"
#import "ACRuleWarningOutput.h"
#import "ACRulesEnvelope.h"
#import "ACSnapshotResponse.h"
#import "ACSnapshotResponses.h"
#import "ACSnapshotsResponseEnvelope.h"
#import "ACTag.h"
#import "ACTagArray.h"
#import "ACTagsEnvelope.h"
//#import "ACTask.h"
//#import "ACTaskByDid.h"
//#import "ACTaskByDidList.h"
//#import "ACTaskByDidListEnvelope.h"
//#import "ACTaskEnvelope.h"
//#import "ACTaskHistory.h"
//#import "ACTaskHistoryList.h"
//#import "ACTaskList.h"
//#import "ACTaskListEnvelope.h"
//#import "ACTaskParameters.h"
//#import "ACTaskRequest.h"
//#import "ACTaskStatus.h"
//#import "ACTaskStatusCounts.h"
//#import "ACTaskStatuses.h"
//#import "ACTaskStatusesEnvelope.h"
//#import "ACTaskStatusesHistoryEnvelope.h"
//#import "ACTaskUpdateRequest.h"
//#import "ACTaskUpdateResponse.h"
//#import "ACTasksStatusCounts.h"
#import "ACToken.h"
#import "ACTokenInfo.h"
#import "ACTokenInfoSuccessResponse.h"
#import "ACTokenRequest.h"
#import "ACTokenResponse.h"
#import "ACUnregisterDeviceResponse.h"
#import "ACUnregisterDeviceResponseEnvelope.h"
#import "ACUser.h"
#import "ACUserEnvelope.h"
#import "ACWebSocketError.h"



@class ACConfiguration;

/**
 * A key for `NSError` user info dictionaries.
 *
 * The corresponding value is the parsed response body for an HTTP error.
 */
extern NSString *const ACResponseObjectErrorKey;

@interface ACApiClient : AFHTTPSessionManager

@property(nonatomic, assign) NSURLRequestCachePolicy cachePolicy;
@property(nonatomic, assign) NSTimeInterval timeoutInterval;
@property(nonatomic, readonly) NSOperationQueue* queue;

/// In order to ensure the HTTPResponseHeaders are correct, it is recommended to initialize one ACApiClient instance per thread.
@property(nonatomic, readonly) NSDictionary* HTTPResponseHeaders;

@property(nonatomic, strong) id<ACResponseDeserializer> responseDeserializer;

@property(nonatomic, strong) id<ACSanitizer> sanitizer;
/**
 * Clears Cache
 */
+(void)clearCache;

/**
 * Turns on cache
 *
 * @param enabled If the cached is enable, must be `YES` or `NO`
 */
+(void)setCacheEnabled:(BOOL) enabled;

/**
 * Gets the request queue size
 *
 * @return The size of `queuedRequests` static variable.
 */
+(NSUInteger)requestQueueSize;

/**
 * Sets the client unreachable
 *
 * @param state off line state, must be `YES` or `NO`
 */
+(void) setOfflineState:(BOOL) state;

/**
 * Gets if the client is unreachable
 *
 * @return The client offline state
 */
+(BOOL) getOfflineState;

/**
 * Sets the client reachability, this may be overridden by the reachability manager if reachability changes
 *
 * @param The client reachability.
 */
+(void) setReachabilityStatus:(AFNetworkReachabilityStatus) status;

/**
 * Gets the client reachability
 *
 * @return The client reachability.
 */
+(AFNetworkReachabilityStatus) getReachabilityStatus;

/**
 * Gets the next request id
 *
 * @return The next executed request id.
 */
+(NSNumber*) nextRequestId;

/**
 * Generates request id and add it to the queue
 *
 * @return The next executed request id.
 */
+(NSNumber*) queueRequest;

/**
 * Removes request id from the queue
 *
 * @param requestId The request which will be removed.
 */
+(void) cancelRequest:(NSNumber*)requestId;

/**
 * Customizes the behavior when the reachability changed
 *
 * @param changeBlock The block will be executed when the reachability changed.
 */
+(void) setReachabilityChangeBlock:(void(^)(int))changeBlock;

/**
 * Sets the api client reachability strategy
 */
- (void)configureCacheReachibility;

/**
 * Sets header for request
 *
 * @param value The header value
 * @param forKey The header key
 */
-(void)setHeaderValue:(NSString*) value
               forKey:(NSString*) forKey;

/**
 * Updates header parameters and query parameters for authentication
 *
 * @param headers The header parameter will be udpated, passed by pointer to pointer.
 * @param querys The query parameters will be updated, passed by pointer to pointer.
 * @param authSettings The authentication names NSArray.
 */
- (void) updateHeaderParams:(NSDictionary **)headers
                queryParams:(NSDictionary **)querys
           WithAuthSettings:(NSArray *)authSettings;

/**
 * Performs request
 *
 * @param path Request url.
 * @param method Request method.
 * @param pathParams Request path parameters.
 * @param queryParams Request query parameters.
 * @param body Request body.
 * @param headerParams Request header parameters.
 * @param authSettings Request authentication names.
 * @param requestContentType Request content-type.
 * @param responseContentType Response content-type.
 * @param completionBlock The block will be executed when the request completed.
 *
 * @return The request id.
 */
-(NSNumber*) requestWithPath:(NSString*) path
                      method:(NSString*) method
                  pathParams:(NSDictionary *) pathParams
                 queryParams:(NSDictionary*) queryParams
                  formParams:(NSDictionary *) formParams
                       files:(NSDictionary *) files
                        body:(id) body
                headerParams:(NSDictionary*) headerParams
                authSettings:(NSArray *) authSettings
          requestContentType:(NSString*) requestContentType
         responseContentType:(NSString*) responseContentType
                responseType:(NSString *) responseType
             completionBlock:(void (^)(id, NSError *))completionBlock;

/**
 * Custom security policy
 *
 * @return AFSecurityPolicy
 */
- (AFSecurityPolicy *) customSecurityPolicy;

/**
 * ACConfiguration return sharedConfig
 *
 * @return ACConfiguration
 */
- (ACConfiguration*) configuration;


@end
